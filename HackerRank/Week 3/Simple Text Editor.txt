#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LEN 1000000   // maximum possible length of text

// Stack to store history for undo
typedef struct Node {
    char *text;
    struct Node *next;
} Node;

Node *top = NULL;

// Push text onto stack
void push(char *s) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->text = (char *)malloc(strlen(s) + 1);
    strcpy(newNode->text, s);
    newNode->next = top;
    top = newNode;
}

// Pop text from stack
char* pop() {
    if (top == NULL) return "";
    Node *temp = top;
    char *val = temp->text;
    top = top->next;
    free(temp);
    return val;
}

int main() {
    int Q;
    scanf("%d", &Q);

    char *text = (char *)malloc(MAX_LEN);
    text[0] = '\0'; // start with empty string

    for (int i = 0; i < Q; i++) {
        int type;
        scanf("%d", &type);

        if (type == 1) {  // append
            char w[100000];
            scanf("%s", w);
            push(text); // save current state
            strcat(text, w);
        }
        else if (type == 2) {  // delete
            int k;
            scanf("%d", &k);
            push(text); // save current state
            int len = strlen(text);
            text[len - k] = '\0'; // remove last k characters
        }
        else if (type == 3) {  // print
            int k;
            scanf("%d", &k);
            if (k > 0 && k <= strlen(text))
                printf("%c\n", text[k - 1]);
        }
        else if (type == 4) {  // undo
            char *prev = pop();
            if (prev != NULL) {
                strcpy(text, prev);
                free(prev);
            }
        }
    }

    // cleanup
    while (top != NULL) {
        char *tmp = pop();
        free(tmp);
    }
    free(text);
    return 0;
}
